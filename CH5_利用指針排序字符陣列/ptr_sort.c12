/*
2018/11/04 22:01:14
ptr_sort.c
*/
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define MAXLINES 5000	    /* max #lines to stored */

char *lineptr[MAXLINES];	/* pointers to test lines */
int readline(char *lineptr[], int nlines);
void writelines(char *lineptr[], int nlines);
void qsort(char *[], int left, int right);

int main2(){
	int nlines;	/* number of input lines read */
	if ((nlines = readline(lineptr, MAXLINES)) >= 0) {
		qsort(lineptr, 0, nlines - 1);
		writelines(lineptr, nlines);
		return 0;
	}
	else {
		printf("error:input too big to sort\n");
		return 1;
	}
	system("pause");
}

#define MAXLEN 1000	/* max length of any input line */
int getline(char *, int);
char *alloc(int);

/* readline: read input lines */
int readline(char *lineptr[], int maxlines) {
	int len, nlines;
	char *p, line[MAXLEN];

	nlines = 0;
	while ((len = getline(line, MAXLEN)) > 0) {
		if (nlines >= MAXLINES || (p = alloc(len)) == NULL)
			return -1;
		else {
			line[len - 1] = '\0';	/* delete newline */
			strcpy(p, line);
			lineptr[nlines++] = p;
		}
		return nlines;
	}
	return -1;
}

/* writelines: write output lines */
	void writelines(char *lineptr[], int nlines) {
		while (nlines-- > 0)
			printf("%s\n", *lineptr++);
	}


/* qsort: sort v[left]..v[right] 成為 increasing order */
void qsort(char *v[], int left, int right)
{
	int i, last;
	void swap(char *v[], int i, int j);	/* 宣告一下 */
	if (left >= right)	                /* do nothing if array contains fewer then two elements */
		return;
	swap(v, left, (left + right / 2));
	last = left;
	for (i = left + 1; i <= right; i++)
	{
		if (strcmp(v[i], v[left]) < 0)
			swap(v, ++last, i);
	}

	swap(v, left, last);	    /* v[last] 已經到達定位 */
	qsort(v, left, last - 1);	/* 排序左邊部份 */
	qsort(v, last + 1, right);	/* 排序右邊部份 */
}
/* swap: interchange v[i] and v[j] */
void swap(char *v[], int i, int j)
{
	char *tmp;
	tmp = v[i];
	v[i] = v[j];
	v[j] = tmp;
}